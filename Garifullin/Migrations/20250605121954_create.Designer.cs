// <auto-generated />
using Garifullin.ContextDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Garifullin.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250605121954_create")]
    partial class create
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Garifullin.Models.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("DealShare")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("Garifullin.Models.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<int?>("Rooms")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalArea")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("Garifullin.Models.ApartmentDemand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("MaxArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MaxFloor")
                        .HasColumnType("int");

                    b.Property<int?>("MaxRooms")
                        .HasColumnType("int");

                    b.Property<decimal?>("MinArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MinFloor")
                        .HasColumnType("int");

                    b.Property<int?>("MinRooms")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ApartmentDemands");
                });

            modelBuilder.Entity("Garifullin.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Garifullin.Models.Deal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DemandId")
                        .HasColumnType("int");

                    b.Property<int>("SupplyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DemandId")
                        .IsUnique();

                    b.HasIndex("SupplyId")
                        .IsUnique();

                    b.ToTable("Deals");
                });

            modelBuilder.Entity("Garifullin.Models.Demand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AddressHouse")
                        .HasColumnType("int");

                    b.Property<int?>("AddressNumber")
                        .HasColumnType("int");

                    b.Property<string>("AddressStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int?>("ApartmentDemandId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("HouseDemandId")
                        .HasColumnType("int");

                    b.Property<int?>("LandDemandId")
                        .HasColumnType("int");

                    b.Property<double?>("MaxPrice")
                        .HasColumnType("float");

                    b.Property<double?>("MinPrice")
                        .HasColumnType("float");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("ApartmentDemandId")
                        .IsUnique()
                        .HasFilter("[ApartmentDemandId] IS NOT NULL");

                    b.HasIndex("ClientId");

                    b.HasIndex("HouseDemandId")
                        .IsUnique()
                        .HasFilter("[HouseDemandId] IS NOT NULL");

                    b.HasIndex("LandDemandId")
                        .IsUnique()
                        .HasFilter("[LandDemandId] IS NOT NULL");

                    b.HasIndex("TypeId");

                    b.ToTable("Demands");
                });

            modelBuilder.Entity("Garifullin.Models.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Garifullin.Models.House", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Rooms")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TotalFloors")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("Garifullin.Models.HouseDemand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("MaxArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MaxFloor")
                        .HasColumnType("int");

                    b.Property<int?>("MaxRooms")
                        .HasColumnType("int");

                    b.Property<decimal?>("MinArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MinFloor")
                        .HasColumnType("int");

                    b.Property<int?>("MinRooms")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HouseDemands");
                });

            modelBuilder.Entity("Garifullin.Models.Land", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("TotalArea")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Lands");
                });

            modelBuilder.Entity("Garifullin.Models.LandDemand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MaxArea")
                        .HasColumnType("int");

                    b.Property<int?>("MinArea")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LandDemands");
                });

            modelBuilder.Entity("Garifullin.Models.RealEstate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AddressHouse")
                        .HasColumnType("int");

                    b.Property<int?>("AddressNumber")
                        .HasColumnType("int");

                    b.Property<string>("AddressStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CoordinateLatitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CoordinateLongitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("HouseId")
                        .HasColumnType("int");

                    b.Property<int?>("LandId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId")
                        .IsUnique()
                        .HasFilter("[ApartmentId] IS NOT NULL");

                    b.HasIndex("DistrictId");

                    b.HasIndex("HouseId")
                        .IsUnique()
                        .HasFilter("[HouseId] IS NOT NULL");

                    b.HasIndex("LandId")
                        .IsUnique()
                        .HasFilter("[LandId] IS NOT NULL");

                    b.ToTable("RealEstates");
                });

            modelBuilder.Entity("Garifullin.Models.RealEstateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TypeName")
                        .IsUnique();

                    b.ToTable("RealEstateTypes");
                });

            modelBuilder.Entity("Garifullin.Models.Supply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("RealEstateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("RealEstateId");

                    b.ToTable("Supplies");
                });

            modelBuilder.Entity("Garifullin.Models.Deal", b =>
                {
                    b.HasOne("Garifullin.Models.Demand", "Demand")
                        .WithOne("Deal")
                        .HasForeignKey("Garifullin.Models.Deal", "DemandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Garifullin.Models.Supply", "Supply")
                        .WithOne("Deal")
                        .HasForeignKey("Garifullin.Models.Deal", "SupplyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Demand");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("Garifullin.Models.Demand", b =>
                {
                    b.HasOne("Garifullin.Models.Agent", "Agent")
                        .WithMany("Demands")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Garifullin.Models.ApartmentDemand", "ApartmentDemand")
                        .WithOne()
                        .HasForeignKey("Garifullin.Models.Demand", "ApartmentDemandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Garifullin.Models.Client", "Client")
                        .WithMany("Demands")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Garifullin.Models.HouseDemand", "HouseDemand")
                        .WithOne()
                        .HasForeignKey("Garifullin.Models.Demand", "HouseDemandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Garifullin.Models.LandDemand", "LandDemand")
                        .WithOne()
                        .HasForeignKey("Garifullin.Models.Demand", "LandDemandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Garifullin.Models.RealEstateType", "RealEstateType")
                        .WithMany("Demands")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("ApartmentDemand");

                    b.Navigation("Client");

                    b.Navigation("HouseDemand");

                    b.Navigation("LandDemand");

                    b.Navigation("RealEstateType");
                });

            modelBuilder.Entity("Garifullin.Models.RealEstate", b =>
                {
                    b.HasOne("Garifullin.Models.Apartment", "Apartment")
                        .WithOne("RealEstate")
                        .HasForeignKey("Garifullin.Models.RealEstate", "ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Garifullin.Models.District", "District")
                        .WithMany("RealEstates")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Garifullin.Models.House", "House")
                        .WithOne("RealEstate")
                        .HasForeignKey("Garifullin.Models.RealEstate", "HouseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Garifullin.Models.Land", "Land")
                        .WithOne("RealEstate")
                        .HasForeignKey("Garifullin.Models.RealEstate", "LandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Apartment");

                    b.Navigation("District");

                    b.Navigation("House");

                    b.Navigation("Land");
                });

            modelBuilder.Entity("Garifullin.Models.Supply", b =>
                {
                    b.HasOne("Garifullin.Models.Agent", "Agent")
                        .WithMany("Supplies")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Garifullin.Models.Client", "Client")
                        .WithMany("Supplies")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Garifullin.Models.RealEstate", "RealEstate")
                        .WithMany("Supplies")
                        .HasForeignKey("RealEstateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Client");

                    b.Navigation("RealEstate");
                });

            modelBuilder.Entity("Garifullin.Models.Agent", b =>
                {
                    b.Navigation("Demands");

                    b.Navigation("Supplies");
                });

            modelBuilder.Entity("Garifullin.Models.Apartment", b =>
                {
                    b.Navigation("RealEstate")
                        .IsRequired();
                });

            modelBuilder.Entity("Garifullin.Models.Client", b =>
                {
                    b.Navigation("Demands");

                    b.Navigation("Supplies");
                });

            modelBuilder.Entity("Garifullin.Models.Demand", b =>
                {
                    b.Navigation("Deal")
                        .IsRequired();
                });

            modelBuilder.Entity("Garifullin.Models.District", b =>
                {
                    b.Navigation("RealEstates");
                });

            modelBuilder.Entity("Garifullin.Models.House", b =>
                {
                    b.Navigation("RealEstate")
                        .IsRequired();
                });

            modelBuilder.Entity("Garifullin.Models.Land", b =>
                {
                    b.Navigation("RealEstate")
                        .IsRequired();
                });

            modelBuilder.Entity("Garifullin.Models.RealEstate", b =>
                {
                    b.Navigation("Supplies");
                });

            modelBuilder.Entity("Garifullin.Models.RealEstateType", b =>
                {
                    b.Navigation("Demands");
                });

            modelBuilder.Entity("Garifullin.Models.Supply", b =>
                {
                    b.Navigation("Deal")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
